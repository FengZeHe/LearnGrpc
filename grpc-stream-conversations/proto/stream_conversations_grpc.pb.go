// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: stream_conversations.proto

package StreamConversations

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StreamConversationsClient is the client API for StreamConversations service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamConversationsClient interface {
	Conversations(ctx context.Context, opts ...grpc.CallOption) (StreamConversations_ConversationsClient, error)
}

type streamConversationsClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamConversationsClient(cc grpc.ClientConnInterface) StreamConversationsClient {
	return &streamConversationsClient{cc}
}

func (c *streamConversationsClient) Conversations(ctx context.Context, opts ...grpc.CallOption) (StreamConversations_ConversationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &StreamConversations_ServiceDesc.Streams[0], "/StreamConversations/Conversations", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamConversationsConversationsClient{stream}
	return x, nil
}

type StreamConversations_ConversationsClient interface {
	Send(*StreamRequest) error
	Recv() (*StreamResponse, error)
	grpc.ClientStream
}

type streamConversationsConversationsClient struct {
	grpc.ClientStream
}

func (x *streamConversationsConversationsClient) Send(m *StreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamConversationsConversationsClient) Recv() (*StreamResponse, error) {
	m := new(StreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamConversationsServer is the server API for StreamConversations service.
// All implementations must embed UnimplementedStreamConversationsServer
// for forward compatibility
type StreamConversationsServer interface {
	Conversations(StreamConversations_ConversationsServer) error
	mustEmbedUnimplementedStreamConversationsServer()
}

// UnimplementedStreamConversationsServer must be embedded to have forward compatible implementations.
type UnimplementedStreamConversationsServer struct {
}

func (UnimplementedStreamConversationsServer) Conversations(StreamConversations_ConversationsServer) error {
	return status.Errorf(codes.Unimplemented, "method Conversations not implemented")
}
func (UnimplementedStreamConversationsServer) mustEmbedUnimplementedStreamConversationsServer() {}

// UnsafeStreamConversationsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamConversationsServer will
// result in compilation errors.
type UnsafeStreamConversationsServer interface {
	mustEmbedUnimplementedStreamConversationsServer()
}

func RegisterStreamConversationsServer(s grpc.ServiceRegistrar, srv StreamConversationsServer) {
	s.RegisterService(&StreamConversations_ServiceDesc, srv)
}

func _StreamConversations_Conversations_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamConversationsServer).Conversations(&streamConversationsConversationsServer{stream})
}

type StreamConversations_ConversationsServer interface {
	Send(*StreamResponse) error
	Recv() (*StreamRequest, error)
	grpc.ServerStream
}

type streamConversationsConversationsServer struct {
	grpc.ServerStream
}

func (x *streamConversationsConversationsServer) Send(m *StreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamConversationsConversationsServer) Recv() (*StreamRequest, error) {
	m := new(StreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamConversations_ServiceDesc is the grpc.ServiceDesc for StreamConversations service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamConversations_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "StreamConversations",
	HandlerType: (*StreamConversationsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Conversations",
			Handler:       _StreamConversations_Conversations_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "stream_conversations.proto",
}
